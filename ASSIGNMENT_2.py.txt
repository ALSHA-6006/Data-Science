1. Write a Python program to replace all occurrences of a space, comma, or dot with a colon.
# In[65]:


import re
def replace_space_comma_dot_with_colon(input_string):
    pattern = re.compile(r'[ ,.]')
    replaced_string = pattern.sub(':', input_string)
    return replaced_string
sample_text = 'Python Exercises, PHP exercises.'
result = replace_space_comma_dot_with_colon(sample_text)
print(result)

2. Create a dataframe using the dictionary below and remove everything (commas (,), !, XXXX, ;, etc.) from the columns except words.
# In[66]:


import pandas as pd
import re
data = {'SUMMARY': ['hello, world!', 'XXXXX test', '123four, five:; six...']}
df = pd.DataFrame(data)
def remove_non_word_characters(text):
    return re.sub(r'\W', ' ', text)
df['SUMMARY'] = df['SUMMARY'].apply(remove_non_word_characters)
print(df)

3. Create a function in python to find all words that are at least 4 characters long in a string. The use of the re.compile() method is mandatory.
# In[13]:


test='Alsha is a data science aspirant'
pattern=r'\b\w{4,}\b'
l=re.compile(pattern)
print(l)


# In[14]:


d=l.findall(test)
print(d)

4. Create a function in python to find all three, four, and five character words in a string. The use of the re.compile() method is mandatory.
# In[7]:


import re
test='Alsha is currently doing his internship with fliproo for 6 months'
pattern=r'\b\w{3,5}\b'
a=re.compile(pattern)
print(a)


# In[8]:


b=a.findall(test)
print(b)

5. Create a function in Python to remove the parenthesis in a list of strings. The use of the re.compile() method is mandatory.
# In[67]:


import re
def remove_parentheses(strings_list):
    pattern = re.compile(r'\([^)]*\)')
    cleaned_strings = [pattern.sub('', s) for s in strings_list]
    return cleaned_strings
sample_text = ["example (.com)", "hr@fliprobo (.com)", "github (.com)", "Hello (Data Science World)", "Data (Scientist)"]
result = remove_parentheses(sample_text)
print(result)

6- Write a python program to remove the parenthesis area from the text stored in the text file using Regular Expression.
# In[80]:


import re
def remove_parentheses_from_file(file_path):
    with open(file_path, 'r') as file:
        text = file.read()
    pattern = re.compile(r'\([^)]*\)')
    cleaned_text = pattern.sub('', text)
    with open(file_path, 'w') as file:
        file.write(cleaned_text)
file_path = 'sample_text_file.txt'
remove_parentheses_from_file(file_path)

7. Write a regular expression in Python to split a string into uppercase letters
# In[29]:


test='ImportanceOfRegularExpressionsInPython'
pattern=(r'[A-Z][a-z]*')
d=re.findall(pattern,test)
print(d)

8. Create a function in python to insert spaces between words starting with numbers
# In[68]:


import re
def insert_spaces_before_numbers(input_string):
    pattern = re.compile(r'(?<=\D)(?=\d)')
    spaced_string = pattern.sub(' ', input_string)
    return spaced_string
sample_text = "RegularExpression1IsAn2ImportantTopic3InPython"
result = insert_spaces_before_numbers(sample_text)
print(result)

9. Create a function in python to insert spaces between words starting with capital letters or with numbers.
# In[69]:


import re
def insert_spaces_before_capital_or_numbers(input_string):
    pattern = re.compile(r'(?<=[A-Z\d])(?=[A-Z])|(?<=[a-z])(?=\d)')
    spaced_string = pattern.sub(' ', input_string)
    return spaced_string
sample_text = "RegularExpression1IsAn2ImportantTopic3InPython"
result = insert_spaces_before_capital_or_numbers(sample_text)
print(result)


# In[ ]:





# In[ ]:




11.Write a Python program to match a string that contains only upper and lowercase letters, numbers, and underscores.
# In[70]:


import re
def is_valid_string(input_string):
    pattern = re.compile(r'^[a-zA-Z0-9_]+$')
    match = pattern.match(input_string)
    return bool(match)
test_string1 = "Valid_String123"
test_string2 = "Invalid@String!"
result1 = is_valid_string(test_string1)
result2 = is_valid_string(test_string2)
print(f'"{test_string1}" is a valid string: {result1}')
print(f'"{test_string2}" is a valid string: {result2}')

12. Write a Python program where a string will start with a specific number. 
# In[71]:


import re
def starts_with_specific_number(input_string, specific_number):
    pattern = re.compile(f'^{re.escape(specific_number)}')
    match = pattern.match(input_string)
test_string1 = "123ABC"
test_string2 = "456DEF"
specific_number = "123"
result1 = starts_with_specific_number(test_string1, specific_number)
result2 = starts_with_specific_number(test_string2, specific_number)
print(f'"{test_string1}" starts with {specific_number}: {result1}')
print(f'"{test_string2}" starts with {specific_number}: {result2}')

13. Write a Python program to remove leading zeros from an IP address
# In[72]:


import re
def remove_leading_zeros_from_ip(ip_address):
    pattern = re.compile(r'(\b|\.)0+(\d)')
    cleaned_ip = pattern.sub(r'\1\2', ip_address)
    return cleaned_ip
ip_address_with_zeros = "192.001.010.003"
cleaned_ip_address = remove_leading_zeros_from_ip(ip_address_with_zeros)
print(f'Original IP: {ip_address_with_zeros}')
print(f'Cleaned IP: {cleaned_ip_address}')

14. Write a regular expression in python to match a date string in the form of Month name followed by day number and year stored in a text file.
# In[73]:


import re
def find_dates_in_text(text):
    pattern = re.compile(r'\b(?:January|February|March|April|May|June|July|August|September|October|November|December)\s+\d{1,2}(?:st|nd|rd|th)?\s+\d{4}\b')
    dates = pattern.findall(text)
    return dates
sample_text = 'On August 15th 1947 that India was declared independent from British colonialism, and the reins of control were handed over to the leaders of the Country.'
result = find_dates_in_text(sample_text)
print("Dates found in the text:")
for date in result:
    print(date)

15. Write a Python program to search some literals strings in a string. 
# In[74]:


import re
def search_literals_in_text(text, literals):
    found_strings = []
    for literal in literals:
        match = re.search(re.escape(literal), text)
        if match:
            found_strings.append(match.group())
    return found_strings
sample_text = 'The quick brown fox jumps over the lazy dog.'
search_strings = ['quick', 'lazy', 'cat']
result = search_literals_in_text(sample_text, search_strings)
print("Literals found in the text:")
for found_string in result:
    print(found_string)

16. Write a Python program to search a literals string in a string and also find the location within the original string where the pattern occurs
# In[75]:


import re
def search_literal_in_text(text, search_string):
    match = re.search(re.escape(search_string), text)
    if match:
        found_string = match.group()
        start_index = match.start()
        end_index = match.end()
        return found_string, start_index, end_index
    else:
        return None
sample_text = 'The quick brown fox jumps over the lazy dog.'
search_string = 'brown'
result = search_literal_in_text(sample_text, search_string)
if result:
    found_string, start_index, end_index = result
    print(f"Literal '{search_string}' found at position {start_index}-{end_index}: '{found_string}'")
else:
    print(f"Literal '{search_string}' not found in the text.")

17. Write a Python program to find the substrings within a string.
# In[76]:


import re
def find_substrings_in_text(text):
    pattern = re.compile(r'\b\w+\b')
    substrings = pattern.findall(text)
    return substrings
sample_text = 'Python exercises, PHP exercises, C# exercises'
result = find_substrings_in_text(sample_text)
print("Substrings found in the text:")
for substring in result:
    print(substring)

18. Write a Python program to find the occurrence and position of the substrings within a string.
# In[77]:


import re
def find_occurrence_and_position(text, substring):
    pattern = re.compile(re.escape(substring))
    matches = pattern.finditer(text)
    occurrences = []
    for match in matches:
        start_index = match.start()
        end_index = match.end()
        occurrences.append((substring, start_index, end_index))
    return occurrences
sample_text = 'Python exercises, PHP exercises, C# exercises'
substring_to_find = 'exercises'
result = find_occurrence_and_position(sample_text, substring_to_find)
print(f"Occurrences of '{substring_to_find}' in the text:")
for occurrence in result:
    substring, start_index, end_index = occurrence
    print(f"Substring: '{substring}', Position: {start_index}-{end_index}")

19. Write a Python program to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.
# In[78]:


from datetime import datetime
def convert_date_format(input_date):
    parsed_date = datetime.strptime(input_date, '%Y-%m-%d')
    formatted_date = parsed_date.strftime('%d-%m-%Y')
    return formatted_date
date_to_convert = '2022-02-19'
converted_date = convert_date_format(date_to_convert)
print(f"Original Date: {date_to_convert}")
print(f"Converted Date: {converted_date}")

20. Create a function in python to find all decimal numbers with a precision of 1 or 2 in a string. The use of the re.compile() method is mandatory
# In[57]:


import re
def find_decimal_numbers_with_precision(input_string):
    pattern = re.compile(r'\b\d+\.\d{1,2}\b')
    decimal_numbers = pattern.findall(input_string)
    return decimal_numbers
sample_text = "01.12 0132.123 2.31875 145.8 3.01 27.25 0.25"
result = find_decimal_numbers_with_precision(sample_text)
print(result)

21.Write a Python program to separate and print the numbers and their position of a given string.
# In[60]:


import re
def find_numbers_with_positions(input_string):
    pattern = re.compile(r'\b\d+\b')
    matches = [(match.group(), match.start(), match.end()) for match in pattern.finditer(input_string)]
    return matches
sample_text = "The price is $12.34, the quantity is 5.6, and the total is 68."
result = find_numbers_with_positions(sample_text)
for number, start, end in result:
    print(f"Number: {number}, Position: {start}-{end-1}")

22. Write a regular expression in python program to extract maximum/largest numeric value from a string.
# In[61]:


import re
def extract_maximum_numeric_value(input_string):
    pattern = re.compile(r'\b\d+\b')
    numeric_values = [int(match) for match in pattern.findall(input_string)]
    max_numeric_value = max(numeric_values, default=None)
    return max_numeric_value
sample_text = 'My marks in each semester are: 947, 896, 926, 524, 734, 950, 642'
result = extract_maximum_numeric_value(sample_text)
print(f'Maximum numeric value: {result}')

23.Create a function in python to insert spaces between words starting with capital letters.
# In[62]:


import re
def insert_spaces_before_capital(input_string):
    pattern = re.compile(r'(?<=\w)(?=[A-Z])')
    spaced_string = pattern.sub(' ', input_string)
    return spaced_string
sample_text = "RegularExpressionIsAnImportantTopicInPython"
result = insert_spaces_before_capital(sample_text)
print(result)

24. Python regex to find sequences of one upper case letter followed by lower case letters
# In[63]:


import re
def find_sequences(input_string):
    pattern = re.compile(r'[A-Z][a-z]+')
    sequences = pattern.findall(input_string)
    return sequences
sample_text = "This is a Sample Text with Some Sequences like UpperCase, LowerCase, AnotherUpperCase, and so on."
result = find_sequences(sample_text)
print(result)

25. Write a Python program to remove continuous duplicate words from Sentence using Regular Expression.
# In[47]:


text="Hello hello world world"
pattern='world$'
aa=re.sub(pattern,'',text)
print(aa)

26.Write a python program using RegEx to accept string ending with alphanumeric character.
# In[49]:


pattern=(r'.*[a-zA-Z0-9]$')
a=re.match(pattern,)
print(a)

27. Write a python program using RegEx to extract the hashtags.
# In[53]:


import re
def extract_hashtags(text):
    hashtag_pattern = re.compile(r'#(\w+)')
    hashtags = hashtag_pattern.findall(text)
    return hashtags
sample_text = """RT @kapil_kausik: #Doltiwal I mean #xyzabc is "hurt" by #Demonetization as the same has rendered USELESS <ed><U+00A0><U+00BD><ed><U+00B1><U+0089> "acquired funds" No wo"""
result = extract_hashtags(sample_text)
print("Hashtags found in the text:")
print(result)

28. Write a python program using RegEx to remove <U+..> like symbols
Check the below sample text, there are strange symbols something of the sort <U+..> all over the place. You need to come up with a general Regex expression that will cover all such symbols.
# In[52]:


import re
def remove_u_plus_symbols(text):
    pattern = re.compile(r'<U\+[A-Fa-f0-9]+>')
    cleaned_text = pattern.sub('', text)
    return cleaned_text
sample_text = "@Jags123456 Bharat band on 28??<ed><U+00A0><U+00BD><ed><U+00B8><U+0082>Those who are protesting #demonetization are all different party leaders"
result = remove_u_plus_symbols(sample_text)
print(result)

29. Write a python program to extract dates from the text stored in the text file.
# In[55]:


import re
def extract_dates_from_file(file_path):
    with open(file_path, 'r') as file:
        text = file.read()
    date_pattern = re.compile(r'\b\d{2}-\d{2}-\d{4}\b')
    dates = date_pattern.findall(text)
    return dates
file_path = 'sample_text.txt'
result = extract_dates_from_file(file_path)
print("Dates found in the text:")
for date in result:
    print(date)

30. Create a function in python to remove all words from a string of length between 2 and 4.
# In[50]:


import re
def remove_words_of_length_2_to_4(input_string):
    pattern = re.compile(r'\b\w{2,4}\b')
    cleaned_string = pattern.sub('', input_string)
    return cleaned_string
sample_text = "The following example creates an ArrayList with a capacity of 50 elements. 4 elements are then added to the ArrayList and the ArrayList is trimmed accordingly."
result = remove_words_of_length_2_to_4(sample_text)
print(result)


# In[ ]:





